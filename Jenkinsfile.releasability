xcodeVersions = ['14.1', '14.2', '14.3.1', '15.0', '15.1']
platforms = ['osx', 'ios', 'watchos', 'tvos', 'catalyst']
platformNames = ['osx': 'macOS', 'ios': 'iOS', 'watchos': 'watchOS', 'tvos': 'tvOS', 'catalyst': 'Catalyst', 'visionos': 'visionOS']
docsXcodeVersion = '14.3.1'

def buildPlatform(platform, xcodeVersion) {
  def platformName = platformNames[platform]
  return {
    node(xcodeVersion.startsWith('15') ? 'macos_13' : 'osx') {
      deleteDir()
      unstash 'source'
      withEnv(["DEVELOPER_DIR=/Applications/Xcode-${xcodeVersion}.app/Contents/Developer"]) {
        sh "./build.sh package ${platform}"
      }
      dir("build") {
        stash includes: "realm-${platform}-${xcodeVersion}.zip",
              name: "${platform}-${xcodeVersion}"
      }
    }
  }
}

def installationTest(platform, test, xcode, linkage = 'dynamic') {
  return {
    node(xcode.startsWith('15') ? 'macos_13' : 'osx') {
      deleteDir()
      unstash 'source'

      if (test == "xcframework") {
        unstash "packaged"
        sh "mv *.zip examples/installation"
      }

      sh """
      hostname
      export DEVELOPER_DIR='/Applications/Xcode-${xcode}.app/Contents/Developer'
      export REALM_TEST_BRANCH='${sha}'
      cd examples/installation
      ./build.rb ${platform} ${test} ${linkage}
      """
    }
  }
}

def xcframeworkEvolutionTest() {
  return {
    node('osx') {
      deleteDir()
      unstash 'source'

      sh """
      hostname
      export REALM_XCODE_OLDEST_VERSION=${xcodeVersions.first()}
      export REALM_XCODE_LATEST_VERSION=${xcodeVersions.last()}
      ./build.sh verify-xcframework-evolution-mode
      """
    }
  }
}

def doBuild() {
  stage('prepare') {
    node('docker') {
      deleteDir()

      checkout(
        [
          $class           : 'GitSCM',
          branches         : scm.branches,
          gitTool          : 'native git',
          extensions       : scm.extensions + [[$class: 'CleanCheckout']],
          userRemoteConfigs: scm.userRemoteConfigs,
        ]
      )

      stash name: 'source', includes: '**'
      stash name: 'build-scripts', includes: 'build.sh,dependencies.list,LICENSE,scripts/*'
    }
  }

  stage('build') {
    def parallelBuilds = [
      'Docs': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh """
          hostname
          export REALM_XCODE_VERSION=${docsXcodeVersion}
          sh build.sh package-docs
          """
          dir('docs') {
            archiveArtifacts artifacts: 'realm-docs.zip'
          }
        }
      },

      'Examples': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh './build.sh package-examples'
          stash includes: 'realm-examples.zip', name: 'examples'
        }
      },

      'Source': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh 'zip -r source.zip *'
          archiveArtifacts artifacts: 'source.zip'
        }
      }
    ]

    for (def p in platforms) {
      def platform = p
      def platformName = platformNames[platform]
      for (def xcodeVersion in xcodeVersions) {
        parallelBuilds["${platformName} ${xcodeVersion}"] = buildPlatform(platform, xcodeVersion)
      }
    }
    parallelBuilds["visionOS 15.1"] = buildPlatform('visionos', '15.1')

    parallel parallelBuilds
  }

  stage('package') {
    node('macos_13') {
      deleteDir()

      for (def platform in platforms) {
        for (def xcodeVersion in xcodeVersions) {
          unstash "${platform}-${xcodeVersion}"
        }
      }
      unstash 'visionos-15.1'

      unstash 'examples'
      unstash 'build-scripts'

      withEnv(['DEVELOPER_DIR=/Applications/Xcode-15.1.app/Contents/Developer']) {
        sh './build.sh package-release'
      }

      dir("pkg") {
        stash includes: 'realm-swift-*.zip', name: 'packaged'
        archiveArtifacts artifacts: '*.zip'
      }
    }
  }

  stage('test') {
    def parallelBuilds = [
      'Test Examples': {
        node('osx') {
          deleteDir()

          unstash 'packaged'
          unstash 'build-scripts'

          sh '''
            hostname
            sh build.sh package-test-examples
          '''
        }
      },

      'Test iOS static': {
        node('osx') {
          deleteDir()
          unstash 'source'

          sh '''
            hostname
            ./scripts/reset-simulators.rb
            sh build.sh test-ios-static
          '''
        }
      },

      'Test macOS': {
        node('osx') {
          deleteDir()
          unstash 'source'
          sh '''
            export REALM_DISABLE_METADATA_ENCRYPTION=1
            sh build.sh test-osx
          '''
        }
      }
    ]

    for (def platform in ['osx', 'ios', 'watchos', 'tvos', 'catalyst']) {
      def platformName = platformNames[platform]
      for (def test in ['xcframework', 'cocoapods', 'carthage', 'spm']) {
        if (platform != 'catalyst' || test != 'carthage') {
          parallelBuilds["Installation - ${platformName} ${test}"] = installationTest(platform, test, docsXcodeVersion)
        }
      }
      parallelBuilds["Installation - ${platformName} CocoaPods static"] = installationTest(platform, 'cocoapods', docsXcodeVersion, 'static')
      parallelBuilds["Installation - ${platformName} spm static"] = installationTest(platform, 'spm', docsXcodeVersion, 'static')
    }
    parallelBuilds['Installation - iOS Static'] = installationTest('ios', 'xcframework', docsXcodeVersion, 'static')
    // parallelBuilds['Installation - XCFramework Evolution'] = xcframeworkEvolutionTest()
    for (def version in xcodeVersions) {
      parallelBuilds["Installation - Xcode ${version}"] = installationTest('osx', 'xcframework', version)
    }

    parallel parallelBuilds
  }
}

try {
  doBuild()
} catch (e) {
  // If there was an exception thrown, the build failed
  currentBuild.result = "FAILED"
  throw e
}

