def carthageXcodeVersion = '14.3.1'

def prepareWorkspace() {
  deleteDir()
  unstash 'source'
  sh 'unzip source.zip'
}

pipeline {
  agent { label 'osx' }
  parameters {
    string(name: 'branch', defaultValue: 'master')
    string(name: 'version', defaultValue: '')
  }
  environment {
    REALM_XCODE_VERSION = "${carthageXcodeVersion}"
  }
  stages {
    stage('Gather Info') {
      agent { label 'osx' }
      steps {
        deleteDir()
        copyArtifacts projectName: 'cocoa-pipeline', selector: lastCompleted()
        // Restash the artifacts we'll use in later steps rather than using
        // copyArtifacts again to avoid problems if cocoa-pipeline is running
        // at the same time as this job
        stash name: 'source', includes: 'source.zip'
        stash name: 'docs', includes: 'realm-docs.zip'
        stash name: 'binary', includes: 'realm-swift-*.zip,Carthage.xcframework.zip,*.spm.zip'
        sh 'unzip source.zip'
        script {
          env.version = sh(script: "sed -n 's/^VERSION=\\(.*\\)\$/\\1/p' dependencies.list", returnStdout: true).trim()
        }
      }
    }

    stage('Tag and publish docs') {
      parallel {
        stage('Tag release') {
          agent { label 'osx' }
          steps {
            prepareWorkspace()
            sh "./build.sh publish-tag ${branch}"
          }
        }

        stage('Publish docs') {
          agent { label 'osx' }
          steps {
            prepareWorkspace()
            unstash 'docs'
            withAWS(credentials: 'cocoa-docs-s3-bucket', region: 'us-east-1') {
              sh './build.sh publish-docs'
            }
          }
        }
      }
    }

    stage('Create Github and Cocoapods releases') {
      parallel {
        stage('Create Github Release') {
          environment {
            GITHUB_ACCESS_TOKEN = credentials('github-release-token')
          }
          agent { label 'osx' }
          steps {
            prepareWorkspace()
            dir('build') {
              unstash 'binary'
            }
            sh './build.sh publish-github'
          }
        }

        stage('Publish CocoaPods') {
          environment {
            COCOAPODS_TRUNK_TOKEN = credentials('cocoapods-trunk-token')
          }
          agent { label 'osx' }
          steps {
            prepareWorkspace()
            sh "./build.sh publish-cocoapods v${env.version}"
          }
        }

        stage('Update update checker') {
          agent { label 'osx' }
          steps {
            prepareWorkspace()
            withCredentials([file(credentialsId: 'c0cc8f9e-c3f1-4e22-b22f-6568392e26ae', variable: 'S3CMD_CONFIG')]) {
              sh './build.sh publish-update-checker'
            }
          }
        }
      }
    }

    stage('Test release') {
      matrix {
        axes {
          axis {
            name 'platform'
            values 'ios', 'osx', 'watchos', 'tvos', 'catalyst'
          }
          axis {
            name 'method'
            values 'xcframework', 'cocoapods', 'carthage', 'spm'
          }
          axis {
            name 'linkage'
            values 'static', 'dynamic'
          }
        }

        excludes {
          // Carthage is always dynamic
          exclude {
            axis {
              name 'linkage'
              values 'static'
            }
            axis {
              name 'method'
              values 'carthage'
            }
          }

          // Static XCFramework is iOS-only
          exclude {
            axis {
              name 'linkage'
              values 'static'
            }
            axis {
              name 'method'
              values 'xcframework'
            }
            axis {
              name 'platform'
              values 'osx', 'watchos', 'catalyst', 'tvos', 'visionos'
            }
          }

          // Catalyst is not supported with Carthage
          exclude {
            axis {
              name 'platform'
              values 'catalyst'
            }
            axis {
              name 'method'
              values 'carthage'
            }
          }

          // visionOS is not supported with Carthage or CocoaPods
          exclude {
            axis {
              name 'platform'
              values 'visionos'
            }
            axis {
              name 'method'
              values 'carthage', 'cocoapods'
            }
          }
        }

        stages {
          stage('test') {
            agent { label 'osx' }
            environment {
              REALM_TEST_RELEASE = "${env.version}"
            }
            steps {
              prepareWorkspace()
              dir('examples/installation') {
                sh "./build.rb ${platform} ${method} ${linkage}"
              }
            }
          }
        }
      }
    }
  }
}
